#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Jan 09, 2019 09:40:53 PM +07  platform: Windows NT

import sys
import test

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
from tkinter import messagebox,IntVar
try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import GA_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    GA_support.set_Tk_var()
    top = Toplevel1 (root)
    GA_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    GA_support.set_Tk_var()
    top = Toplevel1 (w)
    GA_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def cancelClick(self):
        msg=tk.messagebox.askyesno("Genetic Algorithms","Do you want to exit?")
        if msg:
            exit()
    
    def submitClick(self):
        import Result
        test1=True
        path=self.txtPath.get()
        sol_per_pop=self.num_sol.get()
        number_generation=self.num_gen.get()
        linear=GA_support.che50.get()
        nolinear=GA_support.che51.get()
        checkbtn=linear+nolinear
        if path ==''or sol_per_pop ==''or number_generation =='' or checkbtn==0:
            tk.messagebox.showwarning("Genetic Algorithm","Please fill all field") 
        else:
            test1=test.checkPath(path)
            if test1==False:
                tk.messagebox.showwarning("Genetic Algorithm","Path is not existing. Please input again!")
            elif int(sol_per_pop)%2 != 0:
                tk.messagebox.showwarning("Genetic Algorithm","Please input even number for Num_gen_per_pop!")
            elif linear==1:
                result=test.Genetic_algorithm(path,int(number_generation),int(sol_per_pop),"Linear")
                root1=tk.Toplevel(root)
                Result.MyFirstGUI(root1,result)
            else:
                result=test.Genetic_algorithm(path,int(number_generation),int(sol_per_pop),"nolinear")
                root1=tk.Toplevel(root)
                Result.MyFirstGUI(root1,result)

    def noLinearClick(self):
        print(GA_support.che50.get(),GA_support.che51.get())
        self.linear.deselect()
        print(GA_support.che50.get(),GA_support.che51.get())

    def LinearClick(self):
        print(GA_support.che50.get(),GA_support.che51.get())
        self.noLinear.deselect()
        print(GA_support.che50.get(),GA_support.che51.get())
         
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        GA_support.che50=IntVar()
        GA_support.che51=IntVar()
        top.geometry("991x527+453+102")
        top.title("Genertic Algorithms")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.01, rely=0.19, height=56, width=109)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Excel file path:''')

        self.txtPath = tk.Entry(top)
        self.txtPath.place(relx=0.262, rely=0.209,height=34, relwidth=0.519)
        self.txtPath.configure(background="white")
        self.txtPath.configure(disabledforeground="#a3a3a3")
        self.txtPath.configure(font="TkFixedFont")
        self.txtPath.configure(foreground="#000000")
        self.txtPath.configure(highlightbackground="#d9d9d9")
        self.txtPath.configure(highlightcolor="black")
        self.txtPath.configure(insertbackground="black")
        self.txtPath.configure(selectbackground="#c4c4c4")
        self.txtPath.configure(selectforeground="black")

        self.submitBtn = tk.Button(top)
        self.submitBtn.place(relx=0.151, rely=0.835, height=33, width=106)
        self.submitBtn.configure(activebackground="#ececec")
        self.submitBtn.configure(activeforeground="#000000")
        self.submitBtn.configure(background="#d9d9d9")
        self.submitBtn.configure(disabledforeground="#a3a3a3")
        self.submitBtn.configure(foreground="#000000")
        self.submitBtn.configure(highlightbackground="#d9d9d9")
        self.submitBtn.configure(highlightcolor="black")
        self.submitBtn.configure(pady="0")
        self.submitBtn.configure(text='''Submit''')
        self.submitBtn.configure(command=self.submitClick)
        self.cancelBtn = tk.Button(top)
        self.cancelBtn.place(relx=0.696, rely=0.835, height=33, width=106)
        self.cancelBtn.configure(activebackground="#ececec")
        self.cancelBtn.configure(activeforeground="#000000")
        self.cancelBtn.configure(background="#d9d9d9")
        self.cancelBtn.configure(disabledforeground="#a3a3a3")
        self.cancelBtn.configure(foreground="#000000")
        self.cancelBtn.configure(highlightbackground="#d9d9d9")
        self.cancelBtn.configure(highlightcolor="black")
        self.cancelBtn.configure(pady="0")
        self.cancelBtn.configure(text='''Cancel''')
        self.cancelBtn.configure(command=self.cancelClick)


        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.01, rely=0.038, height=30, width=597)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Pleaese enter the Excel file path to input the data. And parameters for execute algorithms''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.01, rely=0.342, height=26, width=154)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Number of generation''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.01, rely=0.455, height=26, width=224)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Num_sol_per_pop (even number)''')

        self.num_gen = tk.Entry(top)
        self.num_gen.place(relx=0.262, rely=0.323,height=34, relwidth=0.519)
        self.num_gen.configure(background="white")
        self.num_gen.configure(disabledforeground="#a3a3a3")
        self.num_gen.configure(font="TkFixedFont")
        self.num_gen.configure(foreground="#000000")
        self.num_gen.configure(highlightbackground="#d9d9d9")
        self.num_gen.configure(highlightcolor="black")
        self.num_gen.configure(insertbackground="black")
        self.num_gen.configure(selectbackground="#c4c4c4")
        self.num_gen.configure(selectforeground="black")

        self.num_sol = tk.Entry(top)
        self.num_sol.place(relx=0.262, rely=0.455,height=34, relwidth=0.519)
        self.num_sol.configure(background="white")
        self.num_sol.configure(disabledforeground="#a3a3a3")
        self.num_sol.configure(font="TkFixedFont")
        self.num_sol.configure(foreground="#000000")
        self.num_sol.configure(highlightbackground="#d9d9d9")
        self.num_sol.configure(highlightcolor="black")
        self.num_sol.configure(insertbackground="black")
        self.num_sol.configure(selectbackground="#c4c4c4")
        self.num_sol.configure(selectforeground="black")

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.01, rely=0.607, height=26, width=132)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Selection methods:''')

        self.linear = tk.Checkbutton(top)
        self.linear.place(relx=0.262, rely=0.607, relheight=0.078
                , relwidth=0.119)
        self.linear.configure(activebackground="#ececec")
        self.linear.configure(activeforeground="#000000")
        self.linear.configure(background="#d9d9d9")
        self.linear.configure(disabledforeground="#a3a3a3")
        self.linear.configure(foreground="#000000")
        self.linear.configure(highlightbackground="#d9d9d9")
        self.linear.configure(highlightcolor="black")
        self.linear.configure(justify='left')
        self.linear.configure(text='''Linear Ranking''')
        self.linear.configure(variable=GA_support.che50)
        self.linear.configure(command=self.LinearClick)

        self.noLinear = tk.Checkbutton(top)
        self.noLinear.place(relx=0.515, rely=0.607, relheight=0.097
                , relwidth=0.301)
        self.noLinear.configure(activebackground="#ececec")
        self.noLinear.configure(activeforeground="#000000")
        self.noLinear.configure(background="#d9d9d9")
        self.noLinear.configure(disabledforeground="#a3a3a3")
        self.noLinear.configure(foreground="#000000")
        self.noLinear.configure(highlightbackground="#d9d9d9")
        self.noLinear.configure(highlightcolor="black")
        self.noLinear.configure(justify='left')
        self.noLinear.configure(text='''Stochastic Universal Sampling (SUS)''')
        self.noLinear.configure(variable=GA_support.che51)
        self.noLinear.configure(command=self.noLinearClick)

if __name__ == '__main__':
    vp_start_gui()





